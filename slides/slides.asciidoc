Types & Functions: FP with Scala
=================================
:author:    Lee Avital
:max-width: 45em
:data-uri:
:icons:


Pain Points In Main Stream Programming Languages
------------------------------------------------

Semantic vs Syntactic correctness

A program accepted by the compiler/interpreter should be correct.

* scripting languages
** "strict mode"
** type hints
** static analysis

* compiled languages
** classes
** generics


Install Scala
-------------

[align="center"]
-----------------------------------
<package-manager> install scala
-----------------------------------


Why Functional Programming?
--------------------------


=== First class functions allow us to be very expressive


Iterative:
[source,python]
---------------------------
lengths = []
for x in xs:
  lengths.append(len(x))
---------------------------


Functional:
[source,python]
----------------------
lengths = map(len, xs)
----------------------


Why Functional Programming? (2)
------------------------------

=== Referential transparency (no side effects)


[source,python]
---------------------
def length(s):
  False = True
  return len(s)
---------------------


Why a strong type system?
-------------------------

=== Null is bad

[source,java]
-----------------------------------
String s = null;
System.out.println(s.toString());
-----------------------------------

=== Casting is bad

[source,java]
---------------------------------------------------
public ActionBox getActionBox( Component a ) {
  return (ActionBox) a;
}
---------------------------------------------------


Why a strong type system? (2)
-----------------------------


=== Primitives are  not  descriptive
[source,java]
-------------------
String name = "Lee"
String color = "red"

name == color
-------------------


[source,scala]
-------------------
val name = Name("Lee")
val color = Color("red")

name == color //  won't compile, type error
-------------------




Why Scala?
----------

* JVM based
** Tooling (build systems, dependency managers, profilers)
** Libraries
* Strong type system
* Less verbose library design than Java
* Interactive top level (REPL)

[source,java]
-----------------------
System.out.println("hello world")
-----------------------


[source,scala]
-----------------
println("hello world")
-----------------


Let's look at some examples
----------------------------

--------------------------------------------
http://github.com/leeavital/scala-examples
--------------------------------------------

